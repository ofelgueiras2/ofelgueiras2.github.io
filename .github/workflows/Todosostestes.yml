name: Teste Selenium (com placeholders para Chrome/Edge)

on:
  workflow_dispatch:

jobs:
  run-selenium:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      # Instala R e pacotes essenciais (se você quiser usar RSelenium e renv)
      - name: Instalar R
        uses: r-lib/actions/setup-r@v2

      # Instala dependências do sistema
      - name: Instalar dependências do sistema
        run: |
          sudo apt-get update
          # Xvfb e libs que precisamos
          sudo apt-get install -y \
            xvfb x11-utils \
            libcurl4-openssl-dev libssl-dev libxml2-dev libgit2-dev libx11-dev \
            wget unzip default-jre

      # Criar placeholders para chromedriver e edgedriver
      - name: Criar placeholders de chromedriver e edgedriver
        run: |
          sudo sh -c 'echo "#!/usr/bin/env bash\necho Fake chromedriver 0.0.0\nexit 0" > /usr/local/bin/chromedriver'
          sudo chmod +x /usr/local/bin/chromedriver

          sudo sh -c 'echo "#!/usr/bin/env bash\necho Fake edgedriver 0.0.0\nexit 0" > /usr/local/bin/edgedriver'
          sudo chmod +x /usr/local/bin/edgedriver

          # Verifica se estão no PATH
          which chromedriver || echo "chromedriver não encontrado"
          which edgedriver || echo "edgedriver não encontrado"
          # Exibe o "fake" --version
          /usr/local/bin/chromedriver --version || true
          /usr/local/bin/edgedriver --version || true

      # Instalar Firefox pelo PPA sem Snap
      - name: Instalar Firefox sem snap
        run: |
          sudo snap remove firefox || echo "Snap firefox não instalado."
          sudo apt-get purge -y firefox*
          sudo add-apt-repository -y ppa:mozillateam/ppa
          # Force prioridade
          echo 'Package: firefox*
          Pin: release o=LP-PPA-mozillateam
          Pin-Priority: 1001' | sudo tee /etc/apt/preferences.d/firefox-no-snap
          sudo apt-get update
          sudo apt-get install -y firefox
          firefox --version

      # Instalar geckodriver 0.36.0 manualmente
      - name: Instalar geckodriver
        run: |
          GECKO_VERSION="0.36.0"
          wget "https://github.com/mozilla/geckodriver/releases/download/v$GECKO_VERSION/geckodriver-v$GECKO_VERSION-linux64.tar.gz"
          tar -xzf geckodriver-v$GECKO_VERSION-linux64.tar.gz
          sudo mv geckodriver /usr/local/bin/
          rm geckodriver-v$GECKO_VERSION-linux64.tar.gz
          geckodriver --version

      # Sobe Xvfb
      - name: Subir Xvfb
        run: |
          nohup Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          sleep 3
          export DISPLAY=:99
          xdpyinfo -display :99 || echo "Xvfb não disponível"

      # Baixa Selenium 4.29.0 e inicia com placeholders
      - name: Iniciar Selenium Standalone
        run: |
          wget -q "https://github.com/SeleniumHQ/selenium/releases/download/selenium-4.29.0/selenium-server-4.29.0.jar" -O selenium-server.jar
          export DISPLAY=:99
          nohup java -jar selenium-server.jar standalone \
            --port 4444 \
            --host 127.0.0.1 \
            --selenium-manager false \
            > selenium.log 2>&1 &
          sleep 10
          echo "Selenium subiu"
          ps aux | grep "[s]elenium" || (echo "❌ Selenium não rodando" && cat selenium.log && exit 1)
          netstat -tuln | grep 4444 || (echo "❌ Porta 4444 não está escutando!" && cat selenium.log && exit 1)

      # (Opcional) Instala RSelenium para teste
      - name: Instalar RSelenium rapidamente
        run: |
          Rscript -e 'install.packages("RSelenium", repos="https://cran.rstudio.com")'

      # Teste simples do RSelenium
      - name: Testar RSelenium
        run: |
          export DISPLAY=:99
          Rscript -e '
            library(RSelenium)
            cat("-> Conectando remoteDriver...\n")
            remDr <- remoteDriver(
              remoteServerAddr="127.0.0.1",
              port=4444,
              browserName="firefox"
            )
            remDr$open()
            cat("-> Navegando em https://www.google.com ...\n")
            remDr$navigate("https://www.google.com")
            Sys.sleep(3)
            current_url <- remDr$getCurrentUrl()[[1]]
            cat("URL atual:", current_url, "\n")
            cat("-> Page title:", remDr$getTitle()[[1]], "\n")
            cat("-> Page source snippet:", substring(remDr$getPageSource()[[1]], 1, 300), "\n")
            remDr$close()
          '
      
      # Ver logs
      - name: Ver logs
        run: |
          echo "=== Logs do Selenium ==="
          cat selenium.log || true

