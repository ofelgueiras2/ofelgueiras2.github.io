name: RSelenium Headless Firefox Test

on:
  workflow_dispatch:

jobs:
  test-selenium:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.4.3'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libcurl4-openssl-dev libssl-dev libxml2-dev \
            xvfb xauth default-jre wget tar

      - name: Install Firefox (via apt, no snap)
        run: |
          sudo add-apt-repository -y ppa:mozillateam/ppa
          printf 'Package: firefox*\nPin: release o=LP-PPA-mozillateam\nPin-Priority: 1001\n' | sudo tee /etc/apt/preferences.d/mozilla-firefox
          sudo apt-get update
          sudo apt-get install -y firefox

      - name: Install geckodriver 0.36.0
        run: |
          wget -q https://github.com/mozilla/geckodriver/releases/download/v0.36.0/geckodriver-v0.36.0-linux64.tar.gz
          tar -xzf geckodriver-v0.36.0-linux64.tar.gz
          chmod +x geckodriver
          sudo mv geckodriver /usr/local/bin/

      - name: Download Selenium Standalone Server
        run: |
          wget -q -O selenium-server.jar https://github.com/SeleniumHQ/selenium/releases/download/selenium-4.29.0/selenium-server-4.29.0.jar

      - name: Start Xvfb and Selenium server
        run: |
          # Start Xvfb (virtual display) on display :99
          Xvfb :99 -screen 0 1280x800x24 &
          echo "DISPLAY=:99" >> $GITHUB_ENV
          # Launch Selenium server in the background, logging to file
          nohup java -jar selenium-server.jar > selenium.log 2>&1 &
          # Wait a few seconds for Selenium server to be ready
          sleep 5

      - name: Install R packages (renv and RSelenium)
        run: |
          # Install renv (for package management) and restore packages
          Rscript -e "install.packages('renv', repos='https://cloud.r-project.org')" || true
          Rscript -e "tryCatch(renv::restore(), error=function(e) { message('renv restore failed: ', e) })"
          # Ensure RSelenium is installed (if not installed by renv)
          Rscript -e "if (!requireNamespace('RSelenium', quietly=TRUE)) install.packages('RSelenium', dependencies=TRUE, repos='https://cloud.r-project.org')"

      - name: Run RSelenium test
        run: |
          Rscript - <<'RSCRIPT'
            # Load RSelenium library
            library(RSelenium)
            # Connect to Selenium (Firefox)
            remDr <- remoteDriver(browserName = "firefox", port = 4444L)
            remDr$open()
            # Navigate to Google
            remDr$navigate("https://www.google.com")
            # Retrieve page title and URL
            page_title <- remDr$getTitle()[[1]]
            page_url <- remDr$getCurrentUrl()[[1]]
            cat("Page Title:", page_title, "\n")
            cat("Page URL:", page_url, "\n")
            # If URL is NA or empty, fail the job for debugging
            if (is.na(page_url) || page_url == "") {
              stop("Failed to retrieve page URL")
            }
            # Close browser session
            remDr$close()
          RSCRIPT

      - name: Show Selenium server log
        # Always run this step to display Selenium log for debugging
        if: ${{ always() }}
        run: |
          echo "------ Selenium Server Log ------"
          cat selenium.log
