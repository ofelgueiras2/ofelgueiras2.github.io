name: Test RSelenium + Firefox + Geckodriver

on:
  workflow_dispatch:

jobs:
  firefox-geckodriver-rselenium:
    runs-on: ubuntu-latest
    steps:
      # Opicional: se quiser ver o repositório.
      - name: Checkout
        uses: actions/checkout@v4

      # 1) REMOVE FIREFOX SNAP (se existir) + PURGE
      - name: Remove Snap e Firefox Snap
        run: |
          sudo snap remove firefox || echo "Snap firefox não estava instalado."
          sudo apt-get purge -y firefox*
      
      # 2) ADICIONA PPA do mozillateam e força priorização do APT
      - name: Instalar Firefox via PPA
        run: |
          sudo add-apt-repository -y ppa:mozillateam/ppa
          echo 'Package: firefox*
          Pin: release o=LP-PPA-mozillateam
          Pin-Priority: 1001
          ' | sudo tee /etc/apt/preferences.d/mozillateam-ppa
          sudo apt-get update
          # (Opcional) Mostra pacotes firefox no apt-cache
          apt-cache policy firefox

          # Instala firefox sem snap
          sudo apt-get install -y firefox
          firefox --version

      # 3) INSTALA geckodriver MANUALMENTE
      - name: Instalar geckodriver
        run: |
          GECKO_VERSION="0.36.0"
          wget -q "https://github.com/mozilla/geckodriver/releases/download/v${GECKO_VERSION}/geckodriver-v${GECKO_VERSION}-linux64.tar.gz"
          tar -xzf geckodriver-v${GECKO_VERSION}-linux64.tar.gz
          sudo mv geckodriver /usr/local/bin/
          rm geckodriver-v${GECKO_VERSION}-linux64.tar.gz
          geckodriver --version

      # 4) INSTALA pacotes necessários p/ R e Xvfb
      - name: Instalar libs e Xvfb
        run: |
          sudo apt-get update
          sudo apt-get install -y r-base xvfb x11-utils libnss3 libcurl4-openssl-dev libssl-dev libxml2-dev

      # 5) SOBE Xvfb :99 (DISPLAY) e confere
      - name: Subir Xvfb
        run: |
          Xvfb :99 -screen 0 1920x1080x24 &
          sleep 2
          DISPLAY=:99 xdpyinfo || (echo "Xvfb falhou" && exit 1)

      # 6) [OPCIONAL] SOBE SELENIUM-SERVER (para quem quiser - mas é opcional)
      - name: Baixar e subir Selenium Server
        run: |
          wget -q https://github.com/SeleniumHQ/selenium/releases/download/selenium-4.29.0/selenium-server-4.29.0.jar
          # Vamos setar manualmente o path do geckodriver
          export PATH="/usr/local/bin:${PATH}"
          export DISPLAY=:99
          nohup java -Dwebdriver.gecko.driver=/usr/local/bin/geckodriver \
            -jar selenium-server-4.29.0.jar standalone \
            --port 4444 --host 127.0.0.1 --selenium-manager false \
            >selenium.log 2>&1 &
          sleep 10
          echo "Selenium subiu"
          ps aux | grep "[s]elenium" || (echo "Selenium não está rodando!" && cat selenium.log && exit 1)
          netstat -tuln | grep 4444 || (echo "Porta 4444 não está escutando!" && cat selenium.log && exit 1)

      # 7) INSTALA RSelenium [Simples]
      - name: Instalar RSelenium
        run: |
          # Pode ser feito com install.packages() simples
          Rscript -e 'install.packages("RSelenium", repos="https://cran.rstudio.com")'

      # 8) TESTE 1: usando SELEnium-server .jar
      - name: Teste com Selenium server
        run: |
          export DISPLAY=:99
          Rscript -e '
            library(RSelenium)
            remDr <- remoteDriver(remoteServerAddr="127.0.0.1", port=4444, browserName="firefox")
            message("Abrindo Firefox via Selenium (selenium-server).")
            remDr$open()
            remDr$navigate("https://www.google.com")
            Sys.sleep(3)
            cur <- remDr$getCurrentUrl()
            message("URL atual: ", cur)
            # Ver snippet do HTML
            ps <- remDr$getPageSource()[[1]]
            message("Snippet do pageSource: ", substring(ps,1,100))
            remDr$close()
          '
          # Se der erro, logs:
          echo "==== LOG do Selenium ===="
          cat selenium.log

      # 9) ENCERRA SELENIUM-SERVER, p/ testarmos geckodriver standalone
      - name: Desligar selenium
        run: |
          pkill -f "selenium-server" || true
          echo "Parou Selenium."

      # 10) SUBIR geckodriver standalone
      - name: Subir geckodriver standalone
        run: |
          export DISPLAY=:99
          nohup geckodriver --port 5555 --log debug > gecko-standalone.log 2>&1 &
          sleep 3
          cat gecko-standalone.log

      # 11) TESTE 2: RSelenium + geckodriver standalone
      - name: Testar geckodriver standalone
        run: |
          export DISPLAY=:99
          Rscript -e '
            library(RSelenium)
            # Conecta no geckodriver que roda na porta 5555
            remDr <- remoteDriver(remoteServerAddr="127.0.0.1", port=5555L, browserName="firefox")
            message("Abrindo Firefox via geckodriver standalone.")
            remDr$open()
            remDr$navigate("https://www.google.com")
            Sys.sleep(3)
            cur <- remDr$getCurrentUrl()
            message("URL atual: ", cur)
            # snippet do HTML
            ps <- remDr$getPageSource()[[1]]
            message("Snippet do pageSource: ", substring(ps,1,100))
            remDr$close()
          '
          echo "=== geckodriver.log final ==="
          cat gecko-standalone.log

      # 12) Testes com HEADLESS x NON-HEADLESS
      - name: Teste 3 HEADLESS explicit
        run: |
          export DISPLAY=:99
          Rscript -e '
            library(RSelenium)
            # re-sobe geckodriver se for preciso
            # pkill -f geckodriver; system("nohup geckodriver --port 5555 &")
            Sys.sleep(2)
            remDr <- remoteDriver(
              remoteServerAddr="127.0.0.1",
              port=5555L,
              browserName="firefox",
              extraCapabilities=list(
                "moz:firefoxOptions"=list(args=c("--headless"))
              )
            )
            message("Teste HEADLESS explicit.")
            remDr$open()
            remDr$navigate("https://www.bing.com")
            Sys.sleep(2)
            cur <- remDr$getCurrentUrl()
            message("URL atual: ", cur)
            remDr$close()
          '

      - name: Teste 4 Sem headless
        run: |
          export DISPLAY=:99
          Rscript -e '
            library(RSelenium)
            # Reutiliza geckodriver porta 5555
            remDr <- remoteDriver(
              remoteServerAddr="127.0.0.1",
              port=5555L,
              browserName="firefox",
              extraCapabilities=list(
                "moz:firefoxOptions"=list(args=c("--no-sandbox")) # sem headless
              )
            )
            message("Teste SEM HEADLESS.")
            remDr$open()
            remDr$navigate("https://www.duckduckgo.com")
            Sys.sleep(2)
            cur <- remDr$getCurrentUrl()
            message("URL atual: ", cur)
            remDr$close()
          '

      # 13) FIM - logs
      - name: Final logs
        run: |
          echo "=== gecko-standalone.log FIM ==="
          cat gecko-standalone.log || true
          ps aux | grep geckodriver || true

          echo "=== Xvfb log ==="
          cat xvfb.log || echo "No xvfb log found"
