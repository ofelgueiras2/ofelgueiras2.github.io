name: RSelenium Firefox Headless Test

on:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # Atualiza e instala dependências do sistema: Xvfb (display virtual), Java (JRE) e netcat
      - name: Setup system (Xvfb, Java, netcat)
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb openjdk-11-jre-headless netcat-traditional

      # Baixa e instala manualmente o Firefox (binário oficial da Mozilla)&#8203;:contentReference[oaicite:6]{index=6}
      - name: Install Firefox (manual download)
        run: |
          wget -O firefox.tar.bz2 "https://download.mozilla.org/?product=firefox-latest&os=linux64&lang=en-US"
          tar -xjf firefox.tar.bz2
          sudo mv firefox /opt/firefox
          sudo ln -s /opt/firefox/firefox /usr/bin/firefox
          firefox --version  # Verifica versão instalada do Firefox

      # Baixa o Geckodriver v0.36.0 e instala no PATH&#8203;:contentReference[oaicite:7]{index=7}
      - name: Install Geckodriver 0.36.0
        run: |
          wget -O geckodriver.tar.gz "https://github.com/mozilla/geckodriver/releases/download/v0.36.0/geckodriver-v0.36.0-linux64.tar.gz"
          tar -xzf geckodriver.tar.gz
          chmod +x geckodriver
          sudo mv geckodriver /usr/local/bin/geckodriver
          geckodriver --version  # Verifica versão instalada do Geckodriver

      # Baixa o Selenium Server standalone v4.8.0 (jar)&#8203;:contentReference[oaicite:8]{index=8}
      - name: Download Selenium Server 4.8.0
        run: |
          wget -O selenium-server.jar "https://github.com/SeleniumHQ/selenium/releases/download/selenium-4.8.0/selenium-server-4.8.0.jar"
          ls -lh selenium-server.jar  # Lista para confirmar download (aprox. 29 MB)

      # Inicia o Xvfb e o Selenium Server em background
      - name: Start Selenium Server (headless)
        run: |
          # Inicia Xvfb em display :99
          nohup Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          echo "Xvfb started on display :99"
          # Inicia o Selenium Server na porta 4444 em segundo plano, logando em selenium.log
          nohup java -jar selenium-server.jar standalone > selenium.log 2>&1 &
          echo "Selenium Server iniciado em background"

      # Aguarda o Selenium Server ficar disponível na porta 4444 antes de prosseguir
      - name: Wait for Selenium Server (port 4444)
        run: |
          for i in {1..30}; do
            nc -z localhost 4444 && break
            echo "Aguardando Selenium Server iniciar..."
            sleep 1
          done
          if ! nc -z localhost 4444; then
            echo "Selenium Server não iniciou na porta 4444 dentro do tempo esperado."
            # Mostra log parcial para depuração, então falha
            head -50 selenium.log
            exit 1
          fi
          echo "Selenium Server está ouvindo na porta 4444."

      # Configura o R (instalação do R no runner) – usando ação oficial do r-lib
      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.4.3'  # ou 'latest' para versão mais recente do R

      # Instala o pacote RSelenium a partir do CRAN&#8203;:contentReference[oaicite:9]{index=9}
      - name: Install RSelenium package
        run: Rscript -e 'install.packages("RSelenium", repos="https://cloud.r-project.org")'

      # Executa o teste RSelenium: abre Firefox, navega até Google, captura URL e título
      - name: Run RSelenium test
        env:
          DISPLAY: :99   # usa o display virtual do Xvfb
        run: |
          Rscript -e '
            library(RSelenium)
            # Conecta no Selenium em localhost:4444 usando Firefox em modo headless&#8203;:contentReference[oaicite:10]{index=10}
            remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4444L,
                                   browserName = "firefox",
                                   extraCapabilities = list("moz:firefoxOptions" = list(args = list("--headless"))))
            remDr$open()
            # Navega para a página do Google
            remDr$navigate("https://www.google.com")
            # Obtém URL corrente e título da página
            current_url <- remDr$getCurrentUrl()[[1]]
            page_title  <- remDr$getTitle()[[1]]
            # Exibe no log os resultados
            message("Current URL: ", current_url)
            message("Page Title: ", page_title)
            # Encerra o navegador
            remDr$close()
          '
      
      # Exibe o log do Selenium Server no final (sempre executar este passo)
      - name: Show Selenium Server log
        if: ${{ always() }}
        run: |
          echo "------- Selenium Server Log -------"
          cat selenium.log
