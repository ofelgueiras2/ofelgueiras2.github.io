name: RSelenium Firefox Headless Test

on:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # Atualiza e instala dependências do sistema: Xvfb (display virtual), Java (JRE) e netcat
      - name: Setup system (Xvfb, Java, netcat)
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb openjdk-11-jre-headless nmap
          # Agora você tem 'ncat' em vez de 'netcat'

      # Baixa e instala manualmente o Firefox (binário oficial da Mozilla)&#8203;:contentReference[oaicite:6]{index=6}
      - name: Install Firefox (binário .tar.bz2)
        run: |
          sudo apt-get update
          sudo apt-get install -y libdbus-glib-1-2
          wget -O firefox.tar.bz2 "https://ftp.mozilla.org/pub/firefox/releases/118.0/linux-x86_64/en-US/firefox-118.0.tar.bz2"
          file firefox.tar.bz2  # verifica o formato
          tar -xjf firefox.tar.bz2
          sudo mv firefox /opt/firefox
          sudo rm -f /usr/bin/firefox
          sudo ln -s /opt/firefox/firefox /usr/bin/firefox
          firefox --version
    
      # Baixa o Geckodriver v0.36.0 e instala no PATH&#8203;:contentReference[oaicite:7]{index=7}
      - name: Install Geckodriver 0.36.0
        run: |
          wget -O geckodriver.tar.gz "https://github.com/mozilla/geckodriver/releases/download/v0.36.0/geckodriver-v0.36.0-linux64.tar.gz"
          tar -xzf geckodriver.tar.gz
          chmod +x geckodriver
          sudo mv geckodriver /usr/local/bin/geckodriver
          geckodriver --version  # Verifica versão instalada do Geckodriver

      # Baixa o Selenium Server standalone v4.8.0 (jar)&#8203;:contentReference[oaicite:8]{index=8}
      - name: Download Selenium Server 4.8.0
        run: |
          wget -O selenium-server.jar "https://github.com/SeleniumHQ/selenium/releases/download/selenium-4.8.0/selenium-server-4.8.0.jar"
          ls -lh selenium-server.jar  # Lista para confirmar download (aprox. 29 MB)

      # Inicia o Xvfb e o Selenium Server em background
      - name: Start Selenium Server (headless)
        run: |
          # Inicia Xvfb em display :99
          nohup Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          echo "Xvfb started on display :99"
          # Inicia o Selenium Server na porta 4444 em segundo plano, logando em selenium.log
          nohup java -jar selenium-server.jar standalone > selenium.log 2>&1 &
          echo "Selenium Server iniciado em background"

      # Aguarda o Selenium Server ficar disponível na porta 4444 antes de prosseguir
      - name: Wait for Selenium Server (port 4444)
        run: |
          for i in {1..30}; do
            nc -z localhost 4444 && break
            echo "Aguardando Selenium Server iniciar..."
            sleep 1
          done
          if ! nc -z localhost 4444; then
            echo "Selenium Server não iniciou na porta 4444 dentro do tempo esperado."
            # Mostra log parcial para depuração, então falha
            head -50 selenium.log
            exit 1
          fi
          echo "Selenium Server está ouvindo na porta 4444."

      # Configura o R (instalação do R no runner) – usando ação oficial do r-lib
      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.4.3'  # ou 'latest' para versão mais recente do R

      - name: Instalar dependências essenciais do sistema
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev libgit2-dev

      - name: Instalar curl no R (resolve diretamente a dependência que falha)
        run: |
          Rscript -e 'install.packages("curl", repos="https://cloud.r-project.org")'

      - name: Instalar RSelenium (agora sem erros)
        run: |
          Rscript -e 'install.packages("RSelenium", repos="https://cloud.r-project.org")'

      # Já assumindo instalações anteriores corretas (Firefox manual, Xvfb rodando, RSelenium instalado)
      - name: Garantir Xvfb limpo (remoção forçada) e iniciar corretamente
        run: |
          sudo pkill -9 Xvfb || true
          sudo rm -rf /tmp/.X99-lock /tmp/.X11-unix/X99
          sleep 2
          Xvfb :99 -ac -screen 0 1280x1024x24 &
          sleep 5
          echo "DISPLAY=:99" >> $GITHUB_ENV

      - name: Baixar e iniciar Selenium Server (com Geckodriver explicitamente configurado)
        run: |
          wget -q -O selenium-server.jar https://github.com/SeleniumHQ/selenium/releases/download/selenium-4.29.0/selenium-server-4.29.0.jar
          nohup java -Dwebdriver.gecko.driver=/usr/local/bin/geckodriver \
          -jar selenium-server.jar standalone \
          --port 4444 \
          --host 127.0.0.1 \
          --selenium-manager false \
          > selenium.log 2>&1 &
          sleep 10
          netstat -tuln | grep 4444 || (echo "❌ Porta 4444 não escutando!" && cat selenium.log && exit 1)

      - name: Executar teste RSelenium (Firefox headless com no-sandbox e logs explícitos)
        env:
          DISPLAY: :99
        run: |
          Rscript -e '
            library(RSelenium)
            remDr <- remoteDriver(
            remoteServerAddr = "localhost",
              port = 4444L,
              browserName = "firefox",
              extraCapabilities = list("moz:firefoxOptions" = list(
                args = list("--headless", "--no-sandbox", "--disable-gpu"),
                log = list(level = "trace")
              ))
            )
            remDr$open()
            remDr$navigate("https://www.google.com")
            Sys.sleep(5)
            current_url <- remDr$getCurrentUrl()[[1]]
            page_title  <- remDr$getTitle()[[1]]
            cat("URL atual:", current_url, "\n")
            cat("Título:", page_title, "\n")
            if (is.na(current_url) || current_url == "") {
              stop("URL está vazia ou NA - falhando o job")
            }
            remDr$close()
          '

      - name: Exibir log do Selenium (diagnóstico avançado)
        if: always()
        run: cat selenium.log
