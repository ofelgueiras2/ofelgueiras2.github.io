name: Novo Teste Selenium

on:
  workflow_dispatch:  # Permite execução manual

jobs:
  run-script:
    runs-on: ubuntu-latest
    env:
      RENV_PATHS_CACHE: ~/.local/share/renv/cache
      DISPLAY: ":99"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup R environment
        uses: r-lib/actions/setup-r@v2

      - name: Create renv directory if it doesn't exist
        run: mkdir -p renv/library

      - name: Setup cache for R packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.local/share/renv/cache
            renv/library
          key: renv-cache-${{ runner.os }}-${{ hashFiles('renv.lock') }}
          restore-keys: |
            renv-cache-${{ runner.os }}-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev libgit2-dev libx11-dev mesa-utils libegl-mesa0 xvfb x11-utils

      - name: Install renv, restore
        run: |
          Rscript -e 'install.packages("renv", repos="https://cran.rstudio.com/")'
          Rscript -e 'renv::activate(); renv::restore(prompt = FALSE)'

      - name: Debug R Libraries (Antes da ativação do renv)
        run: |
          echo "### Caminhos de bibliotecas antes do renv:"
          Rscript -e 'print(.libPaths())'
          echo "### Pacotes instalados antes do renv:"
          Rscript -e 'print(installed.packages()[,1])'

      - name: Debug R Libraries (Depois da ativação do renv)
        run: |
          echo "### Caminhos de bibliotecas após ativação do renv:"
          Rscript -e 'print(.libPaths())'
          echo "### Pacotes instalados após ativação do renv:"
          Rscript -e 'print(installed.packages()[,1])'
          echo "### Status do renv:"
          Rscript -e 'renv::status()'

      - name: Instalar Firefox sem Snap
        run: |
          sudo snap remove firefox || echo "Firefox snap não estava instalado."
          sudo apt-get purge -y firefox*
          sudo add-apt-repository -y ppa:mozillateam/ppa
          echo 'Package: firefox*
          Pin: release o=LP-PPA-mozillateam
          Pin-Priority: 1001' | sudo tee /etc/apt/preferences.d/mozillateam-ppa > /dev/null
          sudo apt-get update
          sudo apt-get install -y --allow-downgrades firefox
          firefox --version
          if dpkg -l | grep firefox; then
            echo "✅ Firefox instalado via APT."
          else
            echo "❌ Firefox não foi instalado via APT."
            exit 1
          fi

      - name: Configurar perfil do Firefox
        run: |
          mkdir -p /tmp/firefox-profile
          chmod -R 777 /tmp/firefox-profile

      - name: Instalar Geckodriver
        run: |
          GECKO_VERSION="0.36.0"
          wget "https://github.com/mozilla/geckodriver/releases/download/v$GECKO_VERSION/geckodriver-v$GECKO_VERSION-linux64.tar.gz"
          tar -xzf geckodriver-v$GECKO_VERSION-linux64.tar.gz
          sudo rm -f /usr/local/bin/geckodriver
          sudo rm -f /usr/bin/geckodriver
          sudo rm -f /snap/bin/geckodriver || true
          export PATH=/usr/local/bin:$PATH
          sudo mv geckodriver /usr/local/bin/
          rm geckodriver-v$GECKO_VERSION-linux64.tar.gz
          geckodriver --version

      - name: Verificar e matar Geckodriver
        run: |
          if pgrep -x "geckodriver" > /dev/null; then
            echo "Geckodriver está em execução. Matando o processo..."
            sudo pkill -f "geckodriver"
          else
            echo "Geckodriver não está em execução."
          fi

      - name: Liberar portas
        run: |
          sudo pkill -f "selenium-server"
          sudo pkill -f "geckodriver"
          sudo pkill -f "Xvfb"

      - name: Iniciar Xvfb
        run: nohup Xvfb :99 -screen 0 1920x1080x24 &

      - name: Verificar Xvfb
        run: |
          ps aux | grep Xvfb
          echo "DISPLAY: $DISPLAY"
          xdpyinfo -display :99 > /dev/null 2>&1 && echo "Xvfb está funcionando." || echo "Xvfb não está funcionando."

      - name: Iniciar Selenium Server
        run: |
          export DISPLAY=:99
          wget -q "https://github.com/SeleniumHQ/selenium/releases/download/selenium-4.29.0/selenium-server-4.29.0.jar" -O selenium-server.jar
          # nohup java -jar selenium-server.jar standalone --port 4444 --host 127.0.0.1 > selenium.log 2>&1 &
          nohup java -jar selenium-server.jar standalone --port 4444 --host 127.0.0.1 --selenium-manager true > selenium.log 2>&1 &
          sleep 30
          echo "🚀 Selenium Server iniciado!"

      - name: Debug Selenium Log
        run: cat selenium.log

      - name: Verificar se Selenium está ativo
        run: |
          ps aux | grep "[s]elenium" || (echo "❌ ERRO: Selenium não está rodando!" && cat selenium.log && exit 1)

      - name: Verificar portas ativas
        run: |
          netstat -tuln | grep 4444 || (echo "❌ ERRO: A porta 4444 não está ativa!" && cat selenium.log && exit 1)

      - name: Testar Firefox manualmente
        run: |
          firefox --version
          firefox --headless --screenshot https://www.google.com
          ls -l screenshot.png

      - name: Iniciar Geckodriver
        run: |
          # Cria o diretório de perfil e define permissões
          mkdir -p /tmp/firefox-profile
          chmod -R 777 /tmp/firefox-profile

          # Inicia o Geckodriver com perfil personalizado
          geckodriver --profile-root /tmp/firefox-profile --port 4445 --allow-system-access --log debug > geckodriver.log 2>&1 &
          # Verifica se o Geckodriver está em execução
          sleep 5
          ps aux | grep geckodriver || echo "❌ ERRO: Geckodriver não está rodando!"

          # Verifica se a porta 4445 está ativa
          netstat -tuln | grep 4445 || echo "❌ ERRO: A porta 4445 não está ativa!"

      - name: Verificar logs do Selenium
        run: |
          cat selenium.log

      - name: Verificar logs do Geckodriver
        run: |
          pkill -f "geckodriver"  # Mata processos do Geckodriver em execução
          geckodriver --profile-root /tmp/firefox-profile --port 4445 --allow-system-access --log debug > geckodriver.log 2>&1 &
          sleep 5
          cat geckodriver.log || echo "Nenhum log do Geckodriver encontrado."
  
      - name: Verificar logs do Firefox
        run: |
          firefox --headless --screenshot https://www.google.com
          ls -l screenshot.png
          cat /tmp/firefox-profile/firefox.log || echo "Nenhum log do Firefox encontrado."

      - name: Testar RSelenium com modo headless
        run: |
          export DISPLAY=:99
          Rscript -e '
            library(RSelenium)
            remDr <- remoteDriver(
              remoteServerAddr = "127.0.0.1",
              port = 4444L,  # Certifique-se de que está usando a porta correta
              browserName = "firefox",
              extraCapabilities = list(
                "moz:firefoxOptions" = list(
                  args = c("--headless", "--no-sandbox", "--disable-gpu", "--disable-dev-shm-usage", "--profile", "/tmp/firefox-profile")
                )
              )
            )
            remDr$open()
            remDr$navigate("https://www.google.com")
            Sys.sleep(60) # Aumentar tempo de espera
            print(remDr$getCurrentUrl())
            remDr$close()
          '

      - name: Testar RSelenium mínimo
        run: |
          export DISPLAY=:99
          Rscript test_rselenium.R

      - name: Run R script
        run: |
          export DISPLAY=:99
          Rscript -e '
            renv::activate();
            if (!requireNamespace("httr", quietly = TRUE)) {
              install.packages("httr", repos="https://cran.rstudio.com/")
            }
            library(httr);
            print(.libPaths());
            print(installed.packages()[,1]);
            print(Sys.getenv("RENV_PATHS_ROOT"));
            source("gs/rscript_teste.R")
          '

      - name: Check if CSV file exists
        run: |
          if [ ! -f "gs/SimuladorEletricidade_OF_MN_2025_2.csv" ]; then
            echo "::error::CSV file does not exist. Skipping commit."
            exit 1
          fi
          echo "CSV file exists. Proceeding to commit."

      - name: Commit new file
        uses: EndBug/add-and-commit@v9
        with:
          add: "gs/SimuladorEletricidade_OF_MN_2025_3.csv"
          message: "Adiciona novo arquivo gerado pelo workflow"
          github_token: ${{ secrets.PAT_TOKEN }}
